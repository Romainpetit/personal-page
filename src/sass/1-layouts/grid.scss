$column-count: 12 !default;
$column-selector: '.col' !default;
$container-selector: '.container' !default;
$font-selector: ':root' !default;
$offset-modifier: 'offset' !default;
$gutter-width: 1rem !default;
$outer-margin: 4rem !default;
$gutter-compensation: (($gutter-width / 2) * -1) !default;
$half-gutter-width: ($gutter-width / 2) !default;

// Breakpoints definitions in em. Unit added afterwards for easier calculations
$width-xs: 0 !default;   // Starting value
$width-sm: 336 !default;  // 336px
$width-md: 540 !default;  // 528px
$width-lg: 720 !default;  // 800px
$width-xl: 1072 !default;  // 1072px
$width-xxl: 1408 !default; // 1408px

// Base font size factor for each breakpoint. REM metrics used everywhere else.
$font-xs: 18px; // 12px
$font-sm: 20px; // 14px
$font-md: 22px; // 16px
$font-lg: 22px; // 16px
$font-xl: 24px; // 16px
$font-xxl: 26px; // 18px

$lineHeight-xs: 29px; // 12px
$lineHeight-sm: 33px; // 14px
$lineHeight-md: 36px; // 16px
$lineHeight-lg: 36px; // 16px
$lineHeight-xl: 39px; // 16px
$lineHeight-xxl: 42px; // 18px

$margin-xs: $lineHeight-xs;
$margin-sm: $lineHeight-sm;
$margin-md: $lineHeight-md;
$margin-lg: $lineHeight-lg;
$margin-xl: $lineHeight-xl;
$margin-xxl: $lineHeight-xxl;

$em-base: 22px;
$modular-scale-ratio: $golden;

// Viewport width breakpoint, with unit
$viewport-xs: #{$width-xs}px !default;
$viewport-sm: #{$width-sm}px !default;
$viewport-md: #{$width-md}px !default;
$viewport-lg: #{$width-lg}px !default;
$viewport-xl: #{$width-xl}px !default;
$viewport-xxl: #{$width-xxl}px !default;

// Viewport height breakpoint, with unit
$viewport-v-xs: 31.25em !default;
$viewport-v-sm: 37.5em !default;

// Containers width for each breakpoint
$container-xs: 100% !default;
$container-sm: 100% !default;
$container-md: 100% !default;
$container-lg: 61.8033% !default;
$container-xl: 61.8033% !default;
$container-xxl: 61.8033% !default;

// Containers padding for each breakpoint
$container-xs-p: $margin-xs;
$container-sm-p: $margin-sm;
$container-md-p: ($margin-md * 2);
$container-lg-p: 0;
$container-xl-p: 0;
$container-xxl-p: 0;

// Breakpoints namespace
$xs: 'xs' !default;
$sm: 'sm' !default;
$md: 'md' !default;
$lg: 'lg' !default;
$xl: 'xl' !default;
$xxl: 'xxl' !default;

$block-delimiter: '-' !default;
$element-delimiter: '-' !default;
$modifier-delimiter: '-' !default;
$default-query: $viewport-xs !default;

// Putting breakpoint related values in arrays
$sizes: $xs $sm $md $lg $xl $xxl !default;
$queries: (
    #{$xs}:#{$viewport-xs},
    #{$sm}:#{$viewport-sm},
    #{$md}:#{$viewport-md},
    #{$lg}:#{$viewport-lg},
    #{$xl}:#{$viewport-xl},
    #{$xxl}:#{$viewport-xxl}) !default;
$queries-v: (
    #{$xs}:#{$viewport-v-xs},
    #{$sm}:#{$viewport-v-sm}) !default;
$fonts: (
    #{$xs}:#{$font-xs},
    #{$sm}:#{$font-sm},
    #{$md}:#{$font-md},
    #{$lg}:#{$font-lg},
    #{$xl}:#{$font-xl},
    #{$xxl}:#{$font-xxl}) !default;
$lineHeights: (
    #{$xs}:#{$lineHeight-xs},
    #{$sm}:#{$lineHeight-sm},
    #{$md}:#{$lineHeight-md},
    #{$lg}:#{$lineHeight-lg},
    #{$xl}:#{$lineHeight-xl},
    #{$xxl}:#{$lineHeight-xxl}) !default;
$containers: (
    #{$xs}:#{$container-xs},
    #{$sm}:#{$container-sm},
    #{$md}:#{$container-md},
    #{$lg}:#{$container-lg},
    #{$xl}:#{$container-xl},
    #{$xxl}:#{$container-xxl}) !default;
$containers-p: (
    #{$xs}:#{$container-xs-p},
    #{$sm}:#{$container-sm-p},
    #{$md}:#{$container-md-p},
    #{$lg}:#{$container-lg-p},
    #{$xl}:#{$container-xl-p},
    #{$xxl}:#{$container-xxl-p}) !default;
$column-properties: 'flex-basis',
                    'max-width' !default;
$offset-properties: 'margin-left' !default;

@mixin mt-base($multiplier, $queries: $queries) {
    @each $size in $sizes {
        $base: map-get($lineHeights, $size);

        @include queries($size, $queries) {
            $total: ($multiplier * $base);
            margin-top: $total;
            // @return $value;
        }
    }
}

@mixin base($property, $multiplier, $queries: $queries) {
    @each $size in $sizes {
        $base: map-get($lineHeights, $size);

        @include queries($size, $queries) {
            $total: ($multiplier * $base);
            #{$property}: $total;
            // @return $value;
        }
    }
}

@mixin mb-base($multiplier, $queries: $queries) {
    @each $size in $sizes {
        $base: map-get($lineHeights, $size);

        @include queries($size, $queries) {
            $total: ($multiplier * $base);
            margin-bottom: $total;
            // @return $value;
        }
    }
}

@mixin lh-base($multiplier, $queries: $queries) {
    @each $size in $sizes {
        $base: map-get($lineHeights, $size);

        @include queries($size, $queries) {
            $total: ($multiplier * $base);
            line-height: $total;
            // @return $value;
        }
    }
}

.layout {
    display: flex;
    min-height: 100vh;
    flex-direction: column;
}

%container {
    margin: 0 auto;
    overflow: hidden;
    box-sizing: border-box;
}

@include containers();
@include fonts();

.row {
    display: flex;
    margin-right: $gutter-compensation;
    margin-left: $gutter-compensation;
    flex-wrap: wrap;
    flex-direction: row;
    box-sizing: border-box;
}

%column {
    padding-right: $half-gutter-width;
    padding-left: $half-gutter-width;
    flex-grow: 0;
    flex-shrink: 0;
    box-sizing: border-box;
}

@include columns();
@include offsets();
